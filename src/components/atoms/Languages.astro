---
const { languages, maxLevel } = Astro.props;
---

{
	languages.map(({ title, level, levelName }) => {
		const width = Math.round((level / maxLevel) * 100);
		const [first, second] = levelName.split(' - ');
		return (
			<div class="mt-2 flex w-[90%] flex-col justify-center items-center mx-auto relative">
				<h3 class="text-lg mb-1 font-bold text-center">{title}</h3>
				<div class="w-full h-7 rounded-full bg-gray-300 animation-container">
					<div
						class={`progress-bar h-7 rounded-full ${
							level === maxLevel ? 'rounded' : 'rounded-r'
						} text-right pr-5 font-bold bg-primary-500 dark:bg-secondary-500 flex items-center justify-end text-white`}
						style={{ width: '0%' }}
						data-width={width}
					>
						<span>
							{first} <span class="font-normal ml-2">{second}</span>
						</span>
					</div>
				</div>
			</div>
		);
	})
}

<style>
	.progress-bar {
		transition: width 1s ease-in-out;
		width: 0;
		border-radius: 999rem;
	}
	.progress-bar span {
		transition: opacity 1s ease-in-out;
		opacity: 0;
	}

	.animation-container.animate .progress-bar span {
		opacity: 1;
	}

	.animation-container.animate .progress-bar {
		width: 100%;
	}
</style>
<script>
	const animationContainers = document.querySelectorAll('.animation-container') as NodeListOf<HTMLElement>;
	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			const progressBar = entry.target.querySelector('.progress-bar') as HTMLElement;

			if (entry.isIntersecting) {
				const width = progressBar?.getAttribute('data-width');
				progressBar.style.width = `${width}%`;
				entry.target.classList.add('animate');
			} else {
				progressBar.style.width = '0';
				entry.target.classList.remove('animate');
			}
		});
	});

	animationContainers.forEach((container) => {
		observer.observe(container);
	});
</script>
