---
import { Icon } from 'astro-icon';

const headers = {
	Authorization: `Bearer ${import.meta.env.GH_API_KEY}`,
};

function formatTitle(title) {
	// Convert dashes and underscores to spaces
	const spaceSeparated = title.replace(/[-_]/g, ' ');

	// Convert to title case
	const titleCase = spaceSeparated.replace(/\w\S*/g, (word) => {
		return word.charAt(0).toUpperCase() + word.slice(1);
	});

	return titleCase;
}

async function fetchCommits(url) {
	const response = await fetch(url, { headers });
	const commits = await response.json();

	if (response.headers.get('Link')) {
		const nextPageUrl = getNextPageUrl(response.headers.get('Link'));
		if (nextPageUrl) {
			const nextPageCommits = await fetchCommits(nextPageUrl);
			return [...commits, ...nextPageCommits];
		}
	}

	return commits;
}

function getNextPageUrl(linkHeader) {
	const links = linkHeader.split(', ');
	const nextLink = links.find((link) => link.includes('rel="next"'));

	if (nextLink) {
		return nextLink.split('; ')[0].slice(1, -1);
	}

	return null;
}

async function data() {
	const response = await fetch('https://api.github.com/users/tverderesi/repos?direction=desc&per_page=100&offset=0', {
		headers,
	});
	const projects = await response.json();

	await Promise.all(
		projects.map(async (project) => {
			const commitsUrl = `https://api.github.com/repos/tverderesi/${project.name}/commits?per_page=100`;
			const commits = await fetchCommits(commitsUrl);
			project.commits = commits.length;
			return project;
		})
	);

	return { projects };
}

const { projects } = await data();

let sortOption = 'commits'; // Default sorting option

function sortProjects() {
	projects.sort((a, b) => {
		if (sortOption === 'name') {
			return a.name.localeCompare(b.name);
		} else if (sortOption === 'stars') {
			return b.stars - a.stars;
		}
		// Add more sorting options as needed

		// Default: No sorting
		return 0;
	});
}

sortProjects(); // Initial sorting

// Function to handle user-selected sort option

projects.forEach((element) => {
	console.log(element.name);
});
projects.sort((a, b) => b.commits - a.commits);
projects.forEach((element) => {
	console.log(element.name);
});
---

<div class="grid gap-6 row-gap-5 md:grid-cols-2 lg:grid-cols-4 -mb-6">
	{
		projects.map((project) => (
			<article class="mb-6 transition">
				<div class="relative h-0 lg:h-64 overflow-hidden bg-gray-400 dark:bg-slate-700 rounded shadow-lg mb-6">
					<h3 class="mb-2 text-xl font-bold leading-snug sm:text-2xl font-heading ">
						<a
							href={project.html_url}
							class="hover:text-primary-600 underline underline-offset-4 decoration-1 decoration-dotted transition ease-in duration-200"
						>
							{formatTitle(project.name)}
						</a>
					</h3>
					<div class="flex flex-col justify-between items-center h-1/2">
						<div class="flex items-center flex-1 basis-1/3">
							<Icon name="mdi:source-commit" class="w-5 h-5 mr-1 text-primary-500" />
							<span class="text-sm text-gray-600 dark:text-gray-400">{project.commits}</span>
						</div>
						<div class="flex items-center flex-1 basis-1/3">
							<Icon name="ic:star" class="w-5 h-5 mr-1 text-yellow-500" />
							<span class="text-sm text-gray-600 dark:text-gray-400">{project.stars}</span>
						</div>
						<div class="flex items-center flex-1 basis-1/3">
							<Icon name="mdi:source-branch" class="w-5 h-5 mr-1 text-gray-500" />
							<span class="text-sm text-gray-600 dark:text-gray-400">{project.forks}</span>
						</div>
					</div>
				</div>
			</article>
		))
	}
</div>
