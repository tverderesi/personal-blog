---
import { Icon } from 'astro-icon';
import fallbackProjects from '~/utils/fallbackProjects.json';

const headers = {
	Authorization: `Bearer ${import.meta.env.GH_API_KEY}`,
};

function formatTitle(title) {
	// Convert dashes and underscores to spaces
	const spaceSeparated = title.replace(/[-_]/g, ' ');

	// Convert to title case
	const titleCase = spaceSeparated.replace(/\w\S*/g, (word) => {
		return word.charAt(0).toUpperCase() + word.slice(1);
	});

	return titleCase;
}

async function fetchCommits(url) {
	const response = await fetch(url, { headers });
	const commits = await response.json();

	if (response.headers.get('Link')) {
		const nextPageUrl = getNextPageUrl(response.headers.get('Link'));
		if (nextPageUrl) {
			const nextPageCommits = await fetchCommits(nextPageUrl);
			return [...commits, ...nextPageCommits];
		}
	}

	return commits;
}

function getNextPageUrl(linkHeader) {
	const links = linkHeader.split(', ');
	const nextLink = links.find((link) => link.includes('rel="next"'));

	if (nextLink) {
		return nextLink.split('; ')[0].slice(1, -1);
	}

	return null;
}

async function data(fallback = false) {
	if (fallback) {
		return fallbackProjects;
	}
	try {
		const response = await fetch('https://api.github.com/users/tverderesi/repos?direction=desc&per_page=100&offset=0', {
			headers,
		});

		if (!response.ok) {
			throw new Error('Failed to fetch data from GitHub API');
		}

		const projects = await response.json();

		await Promise.all(
			projects.map(async (project) => {
				const commitsUrl = `https://api.github.com/repos/tverderesi/${project.name}/commits?per_page=100`;
				const commits = await fetchCommits(commitsUrl);
				project.commits = commits.length;
				project.name = formatTitle(project.name);
				return project;
			})
		);

		return projects;
	} catch (error) {
		console.error('An error occurred while fetching data:', error);
		return fallbackProjects;
	}
}

const projects = await data();

let sortOption = 'commits'; // Default sorting option

function sortProjects() {
	projects.sort((a, b) => {
		if (sortOption === 'name') {
			return a.name.localeCompare(b.name);
		} else if (sortOption === 'stars') {
			return b.stars - a.stars;
		} else if (sortOption === 'commits') {
			return b.commits - a.commits;
		}

		// Default: No sorting
		return 0;
	});
}

sortProjects(); // Initial sorting

// Function to handle user-selected sort option
---

<h2 class="text-3xl w-3/4 mx-auto font-semibold pl-3 p-6">GitHub Projects ({projects.length})</h2>
<div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mx-auto w-3/4 pb-10">
	{
		projects
			.filter((project) => project.fork === false)
			.map((project) => (
				<article class="relative h-48 w-full md:w-64 md:h-48 lg:h-64 lg:w-64 bg-slate-300 dark:bg-slate-800 rounded-2xl shadow-gray-300  dark:shadow-black/30 shadow-lg hover:bg-slate-300 dark:hover:bg-slate-700 hover:text-primary-500 dark:hover:text-secondary-500 mb-6">
					<Icon
						name="ic:sharp-terminal"
						class="absolute  top-[12.5%] left-[12.5%] -z-1  dark:text-slate-400/20 text-slate-500/20 w-3/4 h-3/4 mx-auto my-auto"
					/>
					<a href={project.html_url} class="h-full w-full relative z-1">
						<h3 class="mb-2 text-xl p-3 text-center font-bold  whitespace-normal hyphens-auto h-1/4">{project.name}</h3>

						<div class="flex justify-around items-center w-11/12 h-1/8">
							<div class="flex items-center ">
								<Icon name="mdi:source-commit" class="w-5 h-5 mr-1 text-primary-500 drop-shadow-md" />
								<span class="text-sm text-gray-600 dark:text-gray-400 font-semibold">{project.commits}</span>
							</div>
							<div class="flex items-center ">
								<Icon name="ic:star" class="w-5 h-5 mr-1 text-secondary-500" />
								<span class="text-sm text-gray-600 dark:text-gray-400  font-semibold">{project.stargazers_count}</span>
							</div>
							<div class="flex items-center ">
								<Icon name="ic:baseline-remove-red-eye" class="w-5 h-5 mr-1 text-primary-500" />
								<span class="text-sm text-gray-600 dark:text-gray-400  font-semibold">{project.watchers_count}</span>
							</div>
							<div class="flex items-center">
								<Icon name="mdi:source-branch" class="w-5 h-5 mr-1 text-secondary-500" />
								<span class="text-sm text-gray-600 dark:text-gray-400  font-semibold">{project.forks}</span>
							</div>
						</div>
						<div class="prose flex flex-col items-center justify-center h-1/2">
							<p class="text-sm p-3 text-center font-semibold">{project.description}</p>
						</div>
					</a>
				</article>
			))
	}
</div>
